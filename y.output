Terminals unused in grammar

   '^'


State 30 conflicts: 1 shift/reduce
State 60 conflicts: 1 shift/reduce


Grammar

    0 $accept: start $end

    1 start: INCLUDE start
    2      | function start
    3      | class start
    4      | nam start
    5      | declaration start
    6      | %empty

    7 nam: USING NAMESPACE STD ';'

    8 class: CLASS ID '{' classbdy '}' classobj ';'

    9 classbdy: ACCESS ':' classbdy
   10         | declaration classbdy
   11         | function classbdy
   12         | %empty

   13 classobj: ID ',' classobj
   14         | ID
   15         | %empty

   16 function: type ID '(' arg_list ')' compound_statement
   17         | type ID '(' ')' compound_statement
   18         | type ID '(' type_list ')' ';'
   19         | type ID ':' ':' ID '(' arg_list ')' compound_statement
   20         | type ID ':' ':' ID '(' ')' compound_statement

   21 arg_list: arg ',' arg_list
   22         | arg

   23 type_list: type ',' type_list
   24          | type

   25 arg: type ID
   26    | %empty

   27 compound_statement: '{' statement_list '}'
   28                   | '{' '}'

   29 statement_list: statement
   30               | statement statement_list

   31 statement: declaration
   32          | assignment
   33          | array
   34          | for
   35          | if_else
   36          | function_call
   37          | RETURN expression ';'

   38 declaration: type identifier_list ';'

   39 identifier_list: ID ',' identifier_list
   40                | ID

   41 $@1: %empty

   42 $@2: %empty

   43 $@3: %empty

   44 assignment: ID $@1 '=' $@2 expression $@3 ';'

   45 $@4: %empty

   46 $@5: %empty

   47 $@6: %empty

   48 assignment: type ID $@4 '=' $@5 expression $@6 ';'

   49 $@7: %empty

   50 $@8: %empty

   51 $@9: %empty

   52 for: FOR '(' assignment $@7 expression $@8 ';' expression $@9 ')' compound_statement

   53 $@10: %empty

   54 if_else: IF '(' expression ')' $@10 compound_statement

   55 $@11: %empty

   56 if_else: if_else ELSE IF '(' expression ')' $@11 compound_statement
   57        | if_else ELSE compound_statement

   58 $@12: %empty

   59 expression: expression AND $@12 rel_exp

   60 $@13: %empty

   61 expression: expression OR $@13 rel_exp
   62           | NOT rel_exp
   63           | rel_exp

   64 rel_exp: rel_exp relop add_expression
   65        | add_expression

   66 $@14: %empty

   67 add_expression: add_expression '+' $@14 mul_expression

   68 $@15: %empty

   69 add_expression: add_expression '-' $@15 mul_expression
   70               | mul_expression

   71 $@16: %empty

   72 mul_expression: mul_expression '*' $@16 cast_exp

   73 $@17: %empty

   74 mul_expression: mul_expression '/' $@17 cast_exp
   75               | cast_exp

   76 cast_exp: unary_exp
   77         | '(' type ')' cast_exp

   78 unary_exp: exp

   79 $@18: %empty

   80 unary_exp: INCR $@18 exp

   81 $@19: %empty

   82 unary_exp: DECR $@19 exp

   83 $@20: %empty

   84 unary_exp: exp INCR $@20

   85 $@21: %empty

   86 unary_exp: exp DECR $@21
   87          | unary_op exp

   88 unary_op: '-'
   89         | '+'
   90         | '&'
   91         | '!'

   92 exp: base
   93    | exp '(' ')'
   94    | exp '(' identifier_list ')'

   95 base: ID
   96     | NUM
   97     | FNUM
   98     | STRING
   99     | '(' expression ')'

  100 relop: LE
  101      | GE
  102      | GT
  103      | LT
  104      | EE
  105      | NE

  106 array: type ID '[' NUM ']' ';'
  107      | type ID '[' NUM ']' '=' STRING ';'
  108      | ID '[' NUM ']' '=' STRING ';'
  109      | type ID '[' NUM ']' '=' NUM ';'
  110      | ID '[' NUM ']' '=' NUM ';'
  111      | type ID '[' ']' '=' STRING ';'

  112 function_call: ID '(' identifier_list ')' ';' ID '(' ')' ';'

  113 type: INT
  114     | VOID
  115     | CHAR
  116     | FLOAT
  117     | DOUBLE
  118     | BOOL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 91
'&' (38) 90
'(' (40) 16 17 18 19 20 52 54 56 77 93 94 99 112
')' (41) 16 17 18 19 20 52 54 56 77 93 94 99 112
'*' (42) 72
'+' (43) 67 89
',' (44) 13 21 23 39
'-' (45) 69 88
'/' (47) 74
':' (58) 9 19 20
';' (59) 7 8 18 37 38 44 48 52 106 107 108 109 110 111 112
'=' (61) 44 48 107 108 109 110 111
'[' (91) 106 107 108 109 110 111
']' (93) 106 107 108 109 110 111
'^' (94)
'{' (123) 8 27 28
'}' (125) 8 27 28
error (256)
INT (258) 113
FLOAT (259) 116
CHAR (260) 115
VOID (261) 114
DOUBLE (262) 117
BOOL (263) 118
FOR (264) 52
IF (265) 54 56
ELSE (266) 56 57
CLASS (267) 8
ACCESS (268) 9
USING (269) 7
NAMESPACE (270) 7
STD (271) 7
ID (272) 8 13 14 16 17 18 19 20 25 39 40 44 48 95 106 107 108 109 110
    111 112
NUM (273) 96 106 107 108 109 110
STRING (274) 98 107 108 111
FNUM (275) 97
INCLUDE (276) 1
RETURN (277) 37
GE (278) 101
EE (279) 104
LE (280) 100
NE (281) 105
LT (282) 103
GT (283) 102
AND (284) 59
OR (285) 61
NOT (286) 62
INCR (287) 80 84
DECR (288) 82 86


Nonterminals, with rules where they appear

$accept (51)
    on left: 0
start (52)
    on left: 1 2 3 4 5 6, on right: 0 1 2 3 4 5
nam (53)
    on left: 7, on right: 4
class (54)
    on left: 8, on right: 3
classbdy (55)
    on left: 9 10 11 12, on right: 8 9 10 11
classobj (56)
    on left: 13 14 15, on right: 8 13
function (57)
    on left: 16 17 18 19 20, on right: 2 11
arg_list (58)
    on left: 21 22, on right: 16 19 21
type_list (59)
    on left: 23 24, on right: 18 23
arg (60)
    on left: 25 26, on right: 21 22
compound_statement (61)
    on left: 27 28, on right: 16 17 19 20 52 54 56 57
statement_list (62)
    on left: 29 30, on right: 27 30
statement (63)
    on left: 31 32 33 34 35 36 37, on right: 29 30
declaration (64)
    on left: 38, on right: 5 10 31
identifier_list (65)
    on left: 39 40, on right: 38 39 94 112
assignment (66)
    on left: 44 48, on right: 32 52
$@1 (67)
    on left: 41, on right: 44
$@2 (68)
    on left: 42, on right: 44
$@3 (69)
    on left: 43, on right: 44
$@4 (70)
    on left: 45, on right: 48
$@5 (71)
    on left: 46, on right: 48
$@6 (72)
    on left: 47, on right: 48
for (73)
    on left: 52, on right: 34
$@7 (74)
    on left: 49, on right: 52
$@8 (75)
    on left: 50, on right: 52
$@9 (76)
    on left: 51, on right: 52
if_else (77)
    on left: 54 56 57, on right: 35 56 57
$@10 (78)
    on left: 53, on right: 54
$@11 (79)
    on left: 55, on right: 56
expression (80)
    on left: 59 61 62 63, on right: 37 44 48 52 54 56 59 61 99
$@12 (81)
    on left: 58, on right: 59
$@13 (82)
    on left: 60, on right: 61
rel_exp (83)
    on left: 64 65, on right: 59 61 62 63 64
add_expression (84)
    on left: 67 69 70, on right: 64 65 67 69
$@14 (85)
    on left: 66, on right: 67
$@15 (86)
    on left: 68, on right: 69
mul_expression (87)
    on left: 72 74 75, on right: 67 69 70 72 74
$@16 (88)
    on left: 71, on right: 72
$@17 (89)
    on left: 73, on right: 74
cast_exp (90)
    on left: 76 77, on right: 72 74 75 77
unary_exp (91)
    on left: 78 80 82 84 86 87, on right: 76
$@18 (92)
    on left: 79, on right: 80
$@19 (93)
    on left: 81, on right: 82
$@20 (94)
    on left: 83, on right: 84
$@21 (95)
    on left: 85, on right: 86
unary_op (96)
    on left: 88 89 90 91, on right: 87
exp (97)
    on left: 92 93 94, on right: 78 80 82 84 86 87 93 94
base (98)
    on left: 95 96 97 98 99, on right: 92
relop (99)
    on left: 100 101 102 103 104 105, on right: 64
array (100)
    on left: 106 107 108 109 110 111, on right: 33
function_call (101)
    on left: 112, on right: 36
type (102)
    on left: 113 114 115 116 117 118, on right: 16 17 18 19 20 23 24
    25 38 48 77 106 107 109 111


State 0

    0 $accept: . start $end

    INT      shift, and go to state 1
    FLOAT    shift, and go to state 2
    CHAR     shift, and go to state 3
    VOID     shift, and go to state 4
    DOUBLE   shift, and go to state 5
    BOOL     shift, and go to state 6
    CLASS    shift, and go to state 7
    USING    shift, and go to state 8
    INCLUDE  shift, and go to state 9

    $default  reduce using rule 6 (start)

    start        go to state 10
    nam          go to state 11
    class        go to state 12
    function     go to state 13
    declaration  go to state 14
    type         go to state 15


State 1

  113 type: INT .

    $default  reduce using rule 113 (type)


State 2

  116 type: FLOAT .

    $default  reduce using rule 116 (type)


State 3

  115 type: CHAR .

    $default  reduce using rule 115 (type)


State 4

  114 type: VOID .

    $default  reduce using rule 114 (type)


State 5

  117 type: DOUBLE .

    $default  reduce using rule 117 (type)


State 6

  118 type: BOOL .

    $default  reduce using rule 118 (type)


State 7

    8 class: CLASS . ID '{' classbdy '}' classobj ';'

    ID  shift, and go to state 16


State 8

    7 nam: USING . NAMESPACE STD ';'

    NAMESPACE  shift, and go to state 17


State 9

    1 start: INCLUDE . start

    INT      shift, and go to state 1
    FLOAT    shift, and go to state 2
    CHAR     shift, and go to state 3
    VOID     shift, and go to state 4
    DOUBLE   shift, and go to state 5
    BOOL     shift, and go to state 6
    CLASS    shift, and go to state 7
    USING    shift, and go to state 8
    INCLUDE  shift, and go to state 9

    $default  reduce using rule 6 (start)

    start        go to state 18
    nam          go to state 11
    class        go to state 12
    function     go to state 13
    declaration  go to state 14
    type         go to state 15


State 10

    0 $accept: start . $end

    $end  shift, and go to state 19


State 11

    4 start: nam . start

    INT      shift, and go to state 1
    FLOAT    shift, and go to state 2
    CHAR     shift, and go to state 3
    VOID     shift, and go to state 4
    DOUBLE   shift, and go to state 5
    BOOL     shift, and go to state 6
    CLASS    shift, and go to state 7
    USING    shift, and go to state 8
    INCLUDE  shift, and go to state 9

    $default  reduce using rule 6 (start)

    start        go to state 20
    nam          go to state 11
    class        go to state 12
    function     go to state 13
    declaration  go to state 14
    type         go to state 15


State 12

    3 start: class . start

    INT      shift, and go to state 1
    FLOAT    shift, and go to state 2
    CHAR     shift, and go to state 3
    VOID     shift, and go to state 4
    DOUBLE   shift, and go to state 5
    BOOL     shift, and go to state 6
    CLASS    shift, and go to state 7
    USING    shift, and go to state 8
    INCLUDE  shift, and go to state 9

    $default  reduce using rule 6 (start)

    start        go to state 21
    nam          go to state 11
    class        go to state 12
    function     go to state 13
    declaration  go to state 14
    type         go to state 15


State 13

    2 start: function . start

    INT      shift, and go to state 1
    FLOAT    shift, and go to state 2
    CHAR     shift, and go to state 3
    VOID     shift, and go to state 4
    DOUBLE   shift, and go to state 5
    BOOL     shift, and go to state 6
    CLASS    shift, and go to state 7
    USING    shift, and go to state 8
    INCLUDE  shift, and go to state 9

    $default  reduce using rule 6 (start)

    start        go to state 22
    nam          go to state 11
    class        go to state 12
    function     go to state 13
    declaration  go to state 14
    type         go to state 15


State 14

    5 start: declaration . start

    INT      shift, and go to state 1
    FLOAT    shift, and go to state 2
    CHAR     shift, and go to state 3
    VOID     shift, and go to state 4
    DOUBLE   shift, and go to state 5
    BOOL     shift, and go to state 6
    CLASS    shift, and go to state 7
    USING    shift, and go to state 8
    INCLUDE  shift, and go to state 9

    $default  reduce using rule 6 (start)

    start        go to state 23
    nam          go to state 11
    class        go to state 12
    function     go to state 13
    declaration  go to state 14
    type         go to state 15


State 15

   16 function: type . ID '(' arg_list ')' compound_statement
   17         | type . ID '(' ')' compound_statement
   18         | type . ID '(' type_list ')' ';'
   19         | type . ID ':' ':' ID '(' arg_list ')' compound_statement
   20         | type . ID ':' ':' ID '(' ')' compound_statement
   38 declaration: type . identifier_list ';'

    ID  shift, and go to state 24

    identifier_list  go to state 25


State 16

    8 class: CLASS ID . '{' classbdy '}' classobj ';'

    '{'  shift, and go to state 26


State 17

    7 nam: USING NAMESPACE . STD ';'

    STD  shift, and go to state 27


State 18

    1 start: INCLUDE start .

    $default  reduce using rule 1 (start)


State 19

    0 $accept: start $end .

    $default  accept


State 20

    4 start: nam start .

    $default  reduce using rule 4 (start)


State 21

    3 start: class start .

    $default  reduce using rule 3 (start)


State 22

    2 start: function start .

    $default  reduce using rule 2 (start)


State 23

    5 start: declaration start .

    $default  reduce using rule 5 (start)


State 24

   16 function: type ID . '(' arg_list ')' compound_statement
   17         | type ID . '(' ')' compound_statement
   18         | type ID . '(' type_list ')' ';'
   19         | type ID . ':' ':' ID '(' arg_list ')' compound_statement
   20         | type ID . ':' ':' ID '(' ')' compound_statement
   39 identifier_list: ID . ',' identifier_list
   40                | ID .

    ':'  shift, and go to state 28
    ','  shift, and go to state 29
    '('  shift, and go to state 30

    $default  reduce using rule 40 (identifier_list)


State 25

   38 declaration: type identifier_list . ';'

    ';'  shift, and go to state 31


State 26

    8 class: CLASS ID '{' . classbdy '}' classobj ';'

    INT     shift, and go to state 1
    FLOAT   shift, and go to state 2
    CHAR    shift, and go to state 3
    VOID    shift, and go to state 4
    DOUBLE  shift, and go to state 5
    BOOL    shift, and go to state 6
    ACCESS  shift, and go to state 32

    $default  reduce using rule 12 (classbdy)

    classbdy     go to state 33
    function     go to state 34
    declaration  go to state 35
    type         go to state 15


State 27

    7 nam: USING NAMESPACE STD . ';'

    ';'  shift, and go to state 36


State 28

   19 function: type ID ':' . ':' ID '(' arg_list ')' compound_statement
   20         | type ID ':' . ':' ID '(' ')' compound_statement

    ':'  shift, and go to state 37


State 29

   39 identifier_list: ID ',' . identifier_list

    ID  shift, and go to state 38

    identifier_list  go to state 39


State 30

   16 function: type ID '(' . arg_list ')' compound_statement
   17         | type ID '(' . ')' compound_statement
   18         | type ID '(' . type_list ')' ';'

    INT     shift, and go to state 1
    FLOAT   shift, and go to state 2
    CHAR    shift, and go to state 3
    VOID    shift, and go to state 4
    DOUBLE  shift, and go to state 5
    BOOL    shift, and go to state 6
    ')'     shift, and go to state 40

    ')'       [reduce using rule 26 (arg)]
    $default  reduce using rule 26 (arg)

    arg_list   go to state 41
    type_list  go to state 42
    arg        go to state 43
    type       go to state 44


State 31

   38 declaration: type identifier_list ';' .

    $default  reduce using rule 38 (declaration)


State 32

    9 classbdy: ACCESS . ':' classbdy

    ':'  shift, and go to state 45


State 33

    8 class: CLASS ID '{' classbdy . '}' classobj ';'

    '}'  shift, and go to state 46


State 34

   11 classbdy: function . classbdy

    INT     shift, and go to state 1
    FLOAT   shift, and go to state 2
    CHAR    shift, and go to state 3
    VOID    shift, and go to state 4
    DOUBLE  shift, and go to state 5
    BOOL    shift, and go to state 6
    ACCESS  shift, and go to state 32

    $default  reduce using rule 12 (classbdy)

    classbdy     go to state 47
    function     go to state 34
    declaration  go to state 35
    type         go to state 15


State 35

   10 classbdy: declaration . classbdy

    INT     shift, and go to state 1
    FLOAT   shift, and go to state 2
    CHAR    shift, and go to state 3
    VOID    shift, and go to state 4
    DOUBLE  shift, and go to state 5
    BOOL    shift, and go to state 6
    ACCESS  shift, and go to state 32

    $default  reduce using rule 12 (classbdy)

    classbdy     go to state 48
    function     go to state 34
    declaration  go to state 35
    type         go to state 15


State 36

    7 nam: USING NAMESPACE STD ';' .

    $default  reduce using rule 7 (nam)


State 37

   19 function: type ID ':' ':' . ID '(' arg_list ')' compound_statement
   20         | type ID ':' ':' . ID '(' ')' compound_statement

    ID  shift, and go to state 49


State 38

   39 identifier_list: ID . ',' identifier_list
   40                | ID .

    ','  shift, and go to state 29

    $default  reduce using rule 40 (identifier_list)


State 39

   39 identifier_list: ID ',' identifier_list .

    $default  reduce using rule 39 (identifier_list)


State 40

   17 function: type ID '(' ')' . compound_statement

    '{'  shift, and go to state 50

    compound_statement  go to state 51


State 41

   16 function: type ID '(' arg_list . ')' compound_statement

    ')'  shift, and go to state 52


State 42

   18 function: type ID '(' type_list . ')' ';'

    ')'  shift, and go to state 53


State 43

   21 arg_list: arg . ',' arg_list
   22         | arg .

    ','  shift, and go to state 54

    $default  reduce using rule 22 (arg_list)


State 44

   23 type_list: type . ',' type_list
   24          | type .
   25 arg: type . ID

    ID   shift, and go to state 55
    ','  shift, and go to state 56

    $default  reduce using rule 24 (type_list)


State 45

    9 classbdy: ACCESS ':' . classbdy

    INT     shift, and go to state 1
    FLOAT   shift, and go to state 2
    CHAR    shift, and go to state 3
    VOID    shift, and go to state 4
    DOUBLE  shift, and go to state 5
    BOOL    shift, and go to state 6
    ACCESS  shift, and go to state 32

    $default  reduce using rule 12 (classbdy)

    classbdy     go to state 57
    function     go to state 34
    declaration  go to state 35
    type         go to state 15


State 46

    8 class: CLASS ID '{' classbdy '}' . classobj ';'

    ID  shift, and go to state 58

    $default  reduce using rule 15 (classobj)

    classobj  go to state 59


State 47

   11 classbdy: function classbdy .

    $default  reduce using rule 11 (classbdy)


State 48

   10 classbdy: declaration classbdy .

    $default  reduce using rule 10 (classbdy)


State 49

   19 function: type ID ':' ':' ID . '(' arg_list ')' compound_statement
   20         | type ID ':' ':' ID . '(' ')' compound_statement

    '('  shift, and go to state 60


State 50

   27 compound_statement: '{' . statement_list '}'
   28                   | '{' . '}'

    INT     shift, and go to state 1
    FLOAT   shift, and go to state 2
    CHAR    shift, and go to state 3
    VOID    shift, and go to state 4
    DOUBLE  shift, and go to state 5
    BOOL    shift, and go to state 6
    FOR     shift, and go to state 61
    IF      shift, and go to state 62
    ID      shift, and go to state 63
    RETURN  shift, and go to state 64
    '}'     shift, and go to state 65

    statement_list  go to state 66
    statement       go to state 67
    declaration     go to state 68
    assignment      go to state 69
    for             go to state 70
    if_else         go to state 71
    array           go to state 72
    function_call   go to state 73
    type            go to state 74


State 51

   17 function: type ID '(' ')' compound_statement .

    $default  reduce using rule 17 (function)


State 52

   16 function: type ID '(' arg_list ')' . compound_statement

    '{'  shift, and go to state 50

    compound_statement  go to state 75


State 53

   18 function: type ID '(' type_list ')' . ';'

    ';'  shift, and go to state 76


State 54

   21 arg_list: arg ',' . arg_list

    INT     shift, and go to state 1
    FLOAT   shift, and go to state 2
    CHAR    shift, and go to state 3
    VOID    shift, and go to state 4
    DOUBLE  shift, and go to state 5
    BOOL    shift, and go to state 6

    $default  reduce using rule 26 (arg)

    arg_list  go to state 77
    arg       go to state 43
    type      go to state 78


State 55

   25 arg: type ID .

    $default  reduce using rule 25 (arg)


State 56

   23 type_list: type ',' . type_list

    INT     shift, and go to state 1
    FLOAT   shift, and go to state 2
    CHAR    shift, and go to state 3
    VOID    shift, and go to state 4
    DOUBLE  shift, and go to state 5
    BOOL    shift, and go to state 6

    type_list  go to state 79
    type       go to state 80


State 57

    9 classbdy: ACCESS ':' classbdy .

    $default  reduce using rule 9 (classbdy)


State 58

   13 classobj: ID . ',' classobj
   14         | ID .

    ','  shift, and go to state 81

    $default  reduce using rule 14 (classobj)


State 59

    8 class: CLASS ID '{' classbdy '}' classobj . ';'

    ';'  shift, and go to state 82


State 60

   19 function: type ID ':' ':' ID '(' . arg_list ')' compound_statement
   20         | type ID ':' ':' ID '(' . ')' compound_statement

    INT     shift, and go to state 1
    FLOAT   shift, and go to state 2
    CHAR    shift, and go to state 3
    VOID    shift, and go to state 4
    DOUBLE  shift, and go to state 5
    BOOL    shift, and go to state 6
    ')'     shift, and go to state 83

    ')'       [reduce using rule 26 (arg)]
    $default  reduce using rule 26 (arg)

    arg_list  go to state 84
    arg       go to state 43
    type      go to state 78


State 61

   52 for: FOR . '(' assignment $@7 expression $@8 ';' expression $@9 ')' compound_statement

    '('  shift, and go to state 85


State 62

   54 if_else: IF . '(' expression ')' $@10 compound_statement

    '('  shift, and go to state 86


State 63

   44 assignment: ID . $@1 '=' $@2 expression $@3 ';'
  108 array: ID . '[' NUM ']' '=' STRING ';'
  110      | ID . '[' NUM ']' '=' NUM ';'
  112 function_call: ID . '(' identifier_list ')' ';' ID '(' ')' ';'

    '('  shift, and go to state 87
    '['  shift, and go to state 88

    $default  reduce using rule 41 ($@1)

    $@1  go to state 89


State 64

   37 statement: RETURN . expression ';'

    ID      shift, and go to state 90
    NUM     shift, and go to state 91
    STRING  shift, and go to state 92
    FNUM    shift, and go to state 93
    NOT     shift, and go to state 94
    INCR    shift, and go to state 95
    DECR    shift, and go to state 96
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '('     shift, and go to state 99
    '&'     shift, and go to state 100
    '!'     shift, and go to state 101

    expression      go to state 102
    rel_exp         go to state 103
    add_expression  go to state 104
    mul_expression  go to state 105
    cast_exp        go to state 106
    unary_exp       go to state 107
    unary_op        go to state 108
    exp             go to state 109
    base            go to state 110


State 65

   28 compound_statement: '{' '}' .

    $default  reduce using rule 28 (compound_statement)


State 66

   27 compound_statement: '{' statement_list . '}'

    '}'  shift, and go to state 111


State 67

   29 statement_list: statement .
   30               | statement . statement_list

    INT     shift, and go to state 1
    FLOAT   shift, and go to state 2
    CHAR    shift, and go to state 3
    VOID    shift, and go to state 4
    DOUBLE  shift, and go to state 5
    BOOL    shift, and go to state 6
    FOR     shift, and go to state 61
    IF      shift, and go to state 62
    ID      shift, and go to state 63
    RETURN  shift, and go to state 64

    $default  reduce using rule 29 (statement_list)

    statement_list  go to state 112
    statement       go to state 67
    declaration     go to state 68
    assignment      go to state 69
    for             go to state 70
    if_else         go to state 71
    array           go to state 72
    function_call   go to state 73
    type            go to state 74


State 68

   31 statement: declaration .

    $default  reduce using rule 31 (statement)


State 69

   32 statement: assignment .

    $default  reduce using rule 32 (statement)


State 70

   34 statement: for .

    $default  reduce using rule 34 (statement)


State 71

   35 statement: if_else .
   56 if_else: if_else . ELSE IF '(' expression ')' $@11 compound_statement
   57        | if_else . ELSE compound_statement

    ELSE  shift, and go to state 113

    $default  reduce using rule 35 (statement)


State 72

   33 statement: array .

    $default  reduce using rule 33 (statement)


State 73

   36 statement: function_call .

    $default  reduce using rule 36 (statement)


State 74

   38 declaration: type . identifier_list ';'
   48 assignment: type . ID $@4 '=' $@5 expression $@6 ';'
  106 array: type . ID '[' NUM ']' ';'
  107      | type . ID '[' NUM ']' '=' STRING ';'
  109      | type . ID '[' NUM ']' '=' NUM ';'
  111      | type . ID '[' ']' '=' STRING ';'

    ID  shift, and go to state 114

    identifier_list  go to state 25


State 75

   16 function: type ID '(' arg_list ')' compound_statement .

    $default  reduce using rule 16 (function)


State 76

   18 function: type ID '(' type_list ')' ';' .

    $default  reduce using rule 18 (function)


State 77

   21 arg_list: arg ',' arg_list .

    $default  reduce using rule 21 (arg_list)


State 78

   25 arg: type . ID

    ID  shift, and go to state 55


State 79

   23 type_list: type ',' type_list .

    $default  reduce using rule 23 (type_list)


State 80

   23 type_list: type . ',' type_list
   24          | type .

    ','  shift, and go to state 56

    $default  reduce using rule 24 (type_list)


State 81

   13 classobj: ID ',' . classobj

    ID  shift, and go to state 58

    $default  reduce using rule 15 (classobj)

    classobj  go to state 115


State 82

    8 class: CLASS ID '{' classbdy '}' classobj ';' .

    $default  reduce using rule 8 (class)


State 83

   20 function: type ID ':' ':' ID '(' ')' . compound_statement

    '{'  shift, and go to state 50

    compound_statement  go to state 116


State 84

   19 function: type ID ':' ':' ID '(' arg_list . ')' compound_statement

    ')'  shift, and go to state 117


State 85

   52 for: FOR '(' . assignment $@7 expression $@8 ';' expression $@9 ')' compound_statement

    INT     shift, and go to state 1
    FLOAT   shift, and go to state 2
    CHAR    shift, and go to state 3
    VOID    shift, and go to state 4
    DOUBLE  shift, and go to state 5
    BOOL    shift, and go to state 6
    ID      shift, and go to state 118

    assignment  go to state 119
    type        go to state 120


State 86

   54 if_else: IF '(' . expression ')' $@10 compound_statement

    ID      shift, and go to state 90
    NUM     shift, and go to state 91
    STRING  shift, and go to state 92
    FNUM    shift, and go to state 93
    NOT     shift, and go to state 94
    INCR    shift, and go to state 95
    DECR    shift, and go to state 96
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '('     shift, and go to state 99
    '&'     shift, and go to state 100
    '!'     shift, and go to state 101

    expression      go to state 121
    rel_exp         go to state 103
    add_expression  go to state 104
    mul_expression  go to state 105
    cast_exp        go to state 106
    unary_exp       go to state 107
    unary_op        go to state 108
    exp             go to state 109
    base            go to state 110


State 87

  112 function_call: ID '(' . identifier_list ')' ';' ID '(' ')' ';'

    ID  shift, and go to state 38

    identifier_list  go to state 122


State 88

  108 array: ID '[' . NUM ']' '=' STRING ';'
  110      | ID '[' . NUM ']' '=' NUM ';'

    NUM  shift, and go to state 123


State 89

   44 assignment: ID $@1 . '=' $@2 expression $@3 ';'

    '='  shift, and go to state 124


State 90

   95 base: ID .

    $default  reduce using rule 95 (base)


State 91

   96 base: NUM .

    $default  reduce using rule 96 (base)


State 92

   98 base: STRING .

    $default  reduce using rule 98 (base)


State 93

   97 base: FNUM .

    $default  reduce using rule 97 (base)


State 94

   62 expression: NOT . rel_exp

    ID      shift, and go to state 90
    NUM     shift, and go to state 91
    STRING  shift, and go to state 92
    FNUM    shift, and go to state 93
    INCR    shift, and go to state 95
    DECR    shift, and go to state 96
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '('     shift, and go to state 99
    '&'     shift, and go to state 100
    '!'     shift, and go to state 101

    rel_exp         go to state 125
    add_expression  go to state 104
    mul_expression  go to state 105
    cast_exp        go to state 106
    unary_exp       go to state 107
    unary_op        go to state 108
    exp             go to state 109
    base            go to state 110


State 95

   80 unary_exp: INCR . $@18 exp

    $default  reduce using rule 79 ($@18)

    $@18  go to state 126


State 96

   82 unary_exp: DECR . $@19 exp

    $default  reduce using rule 81 ($@19)

    $@19  go to state 127


State 97

   89 unary_op: '+' .

    $default  reduce using rule 89 (unary_op)


State 98

   88 unary_op: '-' .

    $default  reduce using rule 88 (unary_op)


State 99

   77 cast_exp: '(' . type ')' cast_exp
   99 base: '(' . expression ')'

    INT     shift, and go to state 1
    FLOAT   shift, and go to state 2
    CHAR    shift, and go to state 3
    VOID    shift, and go to state 4
    DOUBLE  shift, and go to state 5
    BOOL    shift, and go to state 6
    ID      shift, and go to state 90
    NUM     shift, and go to state 91
    STRING  shift, and go to state 92
    FNUM    shift, and go to state 93
    NOT     shift, and go to state 94
    INCR    shift, and go to state 95
    DECR    shift, and go to state 96
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '('     shift, and go to state 99
    '&'     shift, and go to state 100
    '!'     shift, and go to state 101

    expression      go to state 128
    rel_exp         go to state 103
    add_expression  go to state 104
    mul_expression  go to state 105
    cast_exp        go to state 106
    unary_exp       go to state 107
    unary_op        go to state 108
    exp             go to state 109
    base            go to state 110
    type            go to state 129


State 100

   90 unary_op: '&' .

    $default  reduce using rule 90 (unary_op)


State 101

   91 unary_op: '!' .

    $default  reduce using rule 91 (unary_op)


State 102

   37 statement: RETURN expression . ';'
   59 expression: expression . AND $@12 rel_exp
   61           | expression . OR $@13 rel_exp

    AND  shift, and go to state 130
    OR   shift, and go to state 131
    ';'  shift, and go to state 132


State 103

   63 expression: rel_exp .
   64 rel_exp: rel_exp . relop add_expression

    GE  shift, and go to state 133
    EE  shift, and go to state 134
    LE  shift, and go to state 135
    NE  shift, and go to state 136
    LT  shift, and go to state 137
    GT  shift, and go to state 138

    $default  reduce using rule 63 (expression)

    relop  go to state 139


State 104

   65 rel_exp: add_expression .
   67 add_expression: add_expression . '+' $@14 mul_expression
   69               | add_expression . '-' $@15 mul_expression

    '+'  shift, and go to state 140
    '-'  shift, and go to state 141

    $default  reduce using rule 65 (rel_exp)


State 105

   70 add_expression: mul_expression .
   72 mul_expression: mul_expression . '*' $@16 cast_exp
   74               | mul_expression . '/' $@17 cast_exp

    '*'  shift, and go to state 142
    '/'  shift, and go to state 143

    $default  reduce using rule 70 (add_expression)


State 106

   75 mul_expression: cast_exp .

    $default  reduce using rule 75 (mul_expression)


State 107

   76 cast_exp: unary_exp .

    $default  reduce using rule 76 (cast_exp)


State 108

   87 unary_exp: unary_op . exp

    ID      shift, and go to state 90
    NUM     shift, and go to state 91
    STRING  shift, and go to state 92
    FNUM    shift, and go to state 93
    '('     shift, and go to state 144

    exp   go to state 145
    base  go to state 110


State 109

   78 unary_exp: exp .
   84          | exp . INCR $@20
   86          | exp . DECR $@21
   93 exp: exp . '(' ')'
   94    | exp . '(' identifier_list ')'

    INCR  shift, and go to state 146
    DECR  shift, and go to state 147
    '('   shift, and go to state 148

    $default  reduce using rule 78 (unary_exp)


State 110

   92 exp: base .

    $default  reduce using rule 92 (exp)


State 111

   27 compound_statement: '{' statement_list '}' .

    $default  reduce using rule 27 (compound_statement)


State 112

   30 statement_list: statement statement_list .

    $default  reduce using rule 30 (statement_list)


State 113

   56 if_else: if_else ELSE . IF '(' expression ')' $@11 compound_statement
   57        | if_else ELSE . compound_statement

    IF   shift, and go to state 149
    '{'  shift, and go to state 50

    compound_statement  go to state 150


State 114

   39 identifier_list: ID . ',' identifier_list
   40                | ID .
   48 assignment: type ID . $@4 '=' $@5 expression $@6 ';'
  106 array: type ID . '[' NUM ']' ';'
  107      | type ID . '[' NUM ']' '=' STRING ';'
  109      | type ID . '[' NUM ']' '=' NUM ';'
  111      | type ID . '[' ']' '=' STRING ';'

    ','  shift, and go to state 29
    '['  shift, and go to state 151

    '='       reduce using rule 45 ($@4)
    $default  reduce using rule 40 (identifier_list)

    $@4  go to state 152


State 115

   13 classobj: ID ',' classobj .

    $default  reduce using rule 13 (classobj)


State 116

   20 function: type ID ':' ':' ID '(' ')' compound_statement .

    $default  reduce using rule 20 (function)


State 117

   19 function: type ID ':' ':' ID '(' arg_list ')' . compound_statement

    '{'  shift, and go to state 50

    compound_statement  go to state 153


State 118

   44 assignment: ID . $@1 '=' $@2 expression $@3 ';'

    $default  reduce using rule 41 ($@1)

    $@1  go to state 89


State 119

   52 for: FOR '(' assignment . $@7 expression $@8 ';' expression $@9 ')' compound_statement

    $default  reduce using rule 49 ($@7)

    $@7  go to state 154


State 120

   48 assignment: type . ID $@4 '=' $@5 expression $@6 ';'

    ID  shift, and go to state 155


State 121

   54 if_else: IF '(' expression . ')' $@10 compound_statement
   59 expression: expression . AND $@12 rel_exp
   61           | expression . OR $@13 rel_exp

    AND  shift, and go to state 130
    OR   shift, and go to state 131
    ')'  shift, and go to state 156


State 122

  112 function_call: ID '(' identifier_list . ')' ';' ID '(' ')' ';'

    ')'  shift, and go to state 157


State 123

  108 array: ID '[' NUM . ']' '=' STRING ';'
  110      | ID '[' NUM . ']' '=' NUM ';'

    ']'  shift, and go to state 158


State 124

   44 assignment: ID $@1 '=' . $@2 expression $@3 ';'

    $default  reduce using rule 42 ($@2)

    $@2  go to state 159


State 125

   62 expression: NOT rel_exp .
   64 rel_exp: rel_exp . relop add_expression

    GE  shift, and go to state 133
    EE  shift, and go to state 134
    LE  shift, and go to state 135
    NE  shift, and go to state 136
    LT  shift, and go to state 137
    GT  shift, and go to state 138

    $default  reduce using rule 62 (expression)

    relop  go to state 139


State 126

   80 unary_exp: INCR $@18 . exp

    ID      shift, and go to state 90
    NUM     shift, and go to state 91
    STRING  shift, and go to state 92
    FNUM    shift, and go to state 93
    '('     shift, and go to state 144

    exp   go to state 160
    base  go to state 110


State 127

   82 unary_exp: DECR $@19 . exp

    ID      shift, and go to state 90
    NUM     shift, and go to state 91
    STRING  shift, and go to state 92
    FNUM    shift, and go to state 93
    '('     shift, and go to state 144

    exp   go to state 161
    base  go to state 110


State 128

   59 expression: expression . AND $@12 rel_exp
   61           | expression . OR $@13 rel_exp
   99 base: '(' expression . ')'

    AND  shift, and go to state 130
    OR   shift, and go to state 131
    ')'  shift, and go to state 162


State 129

   77 cast_exp: '(' type . ')' cast_exp

    ')'  shift, and go to state 163


State 130

   59 expression: expression AND . $@12 rel_exp

    $default  reduce using rule 58 ($@12)

    $@12  go to state 164


State 131

   61 expression: expression OR . $@13 rel_exp

    $default  reduce using rule 60 ($@13)

    $@13  go to state 165


State 132

   37 statement: RETURN expression ';' .

    $default  reduce using rule 37 (statement)


State 133

  101 relop: GE .

    $default  reduce using rule 101 (relop)


State 134

  104 relop: EE .

    $default  reduce using rule 104 (relop)


State 135

  100 relop: LE .

    $default  reduce using rule 100 (relop)


State 136

  105 relop: NE .

    $default  reduce using rule 105 (relop)


State 137

  103 relop: LT .

    $default  reduce using rule 103 (relop)


State 138

  102 relop: GT .

    $default  reduce using rule 102 (relop)


State 139

   64 rel_exp: rel_exp relop . add_expression

    ID      shift, and go to state 90
    NUM     shift, and go to state 91
    STRING  shift, and go to state 92
    FNUM    shift, and go to state 93
    INCR    shift, and go to state 95
    DECR    shift, and go to state 96
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '('     shift, and go to state 99
    '&'     shift, and go to state 100
    '!'     shift, and go to state 101

    add_expression  go to state 166
    mul_expression  go to state 105
    cast_exp        go to state 106
    unary_exp       go to state 107
    unary_op        go to state 108
    exp             go to state 109
    base            go to state 110


State 140

   67 add_expression: add_expression '+' . $@14 mul_expression

    $default  reduce using rule 66 ($@14)

    $@14  go to state 167


State 141

   69 add_expression: add_expression '-' . $@15 mul_expression

    $default  reduce using rule 68 ($@15)

    $@15  go to state 168


State 142

   72 mul_expression: mul_expression '*' . $@16 cast_exp

    $default  reduce using rule 71 ($@16)

    $@16  go to state 169


State 143

   74 mul_expression: mul_expression '/' . $@17 cast_exp

    $default  reduce using rule 73 ($@17)

    $@17  go to state 170


State 144

   99 base: '(' . expression ')'

    ID      shift, and go to state 90
    NUM     shift, and go to state 91
    STRING  shift, and go to state 92
    FNUM    shift, and go to state 93
    NOT     shift, and go to state 94
    INCR    shift, and go to state 95
    DECR    shift, and go to state 96
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '('     shift, and go to state 99
    '&'     shift, and go to state 100
    '!'     shift, and go to state 101

    expression      go to state 128
    rel_exp         go to state 103
    add_expression  go to state 104
    mul_expression  go to state 105
    cast_exp        go to state 106
    unary_exp       go to state 107
    unary_op        go to state 108
    exp             go to state 109
    base            go to state 110


State 145

   87 unary_exp: unary_op exp .
   93 exp: exp . '(' ')'
   94    | exp . '(' identifier_list ')'

    '('  shift, and go to state 148

    $default  reduce using rule 87 (unary_exp)


State 146

   84 unary_exp: exp INCR . $@20

    $default  reduce using rule 83 ($@20)

    $@20  go to state 171


State 147

   86 unary_exp: exp DECR . $@21

    $default  reduce using rule 85 ($@21)

    $@21  go to state 172


State 148

   93 exp: exp '(' . ')'
   94    | exp '(' . identifier_list ')'

    ID   shift, and go to state 38
    ')'  shift, and go to state 173

    identifier_list  go to state 174


State 149

   56 if_else: if_else ELSE IF . '(' expression ')' $@11 compound_statement

    '('  shift, and go to state 175


State 150

   57 if_else: if_else ELSE compound_statement .

    $default  reduce using rule 57 (if_else)


State 151

  106 array: type ID '[' . NUM ']' ';'
  107      | type ID '[' . NUM ']' '=' STRING ';'
  109      | type ID '[' . NUM ']' '=' NUM ';'
  111      | type ID '[' . ']' '=' STRING ';'

    NUM  shift, and go to state 176
    ']'  shift, and go to state 177


State 152

   48 assignment: type ID $@4 . '=' $@5 expression $@6 ';'

    '='  shift, and go to state 178


State 153

   19 function: type ID ':' ':' ID '(' arg_list ')' compound_statement .

    $default  reduce using rule 19 (function)


State 154

   52 for: FOR '(' assignment $@7 . expression $@8 ';' expression $@9 ')' compound_statement

    ID      shift, and go to state 90
    NUM     shift, and go to state 91
    STRING  shift, and go to state 92
    FNUM    shift, and go to state 93
    NOT     shift, and go to state 94
    INCR    shift, and go to state 95
    DECR    shift, and go to state 96
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '('     shift, and go to state 99
    '&'     shift, and go to state 100
    '!'     shift, and go to state 101

    expression      go to state 179
    rel_exp         go to state 103
    add_expression  go to state 104
    mul_expression  go to state 105
    cast_exp        go to state 106
    unary_exp       go to state 107
    unary_op        go to state 108
    exp             go to state 109
    base            go to state 110


State 155

   48 assignment: type ID . $@4 '=' $@5 expression $@6 ';'

    $default  reduce using rule 45 ($@4)

    $@4  go to state 152


State 156

   54 if_else: IF '(' expression ')' . $@10 compound_statement

    $default  reduce using rule 53 ($@10)

    $@10  go to state 180


State 157

  112 function_call: ID '(' identifier_list ')' . ';' ID '(' ')' ';'

    ';'  shift, and go to state 181


State 158

  108 array: ID '[' NUM ']' . '=' STRING ';'
  110      | ID '[' NUM ']' . '=' NUM ';'

    '='  shift, and go to state 182


State 159

   44 assignment: ID $@1 '=' $@2 . expression $@3 ';'

    ID      shift, and go to state 90
    NUM     shift, and go to state 91
    STRING  shift, and go to state 92
    FNUM    shift, and go to state 93
    NOT     shift, and go to state 94
    INCR    shift, and go to state 95
    DECR    shift, and go to state 96
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '('     shift, and go to state 99
    '&'     shift, and go to state 100
    '!'     shift, and go to state 101

    expression      go to state 183
    rel_exp         go to state 103
    add_expression  go to state 104
    mul_expression  go to state 105
    cast_exp        go to state 106
    unary_exp       go to state 107
    unary_op        go to state 108
    exp             go to state 109
    base            go to state 110


State 160

   80 unary_exp: INCR $@18 exp .
   93 exp: exp . '(' ')'
   94    | exp . '(' identifier_list ')'

    '('  shift, and go to state 148

    $default  reduce using rule 80 (unary_exp)


State 161

   82 unary_exp: DECR $@19 exp .
   93 exp: exp . '(' ')'
   94    | exp . '(' identifier_list ')'

    '('  shift, and go to state 148

    $default  reduce using rule 82 (unary_exp)


State 162

   99 base: '(' expression ')' .

    $default  reduce using rule 99 (base)


State 163

   77 cast_exp: '(' type ')' . cast_exp

    ID      shift, and go to state 90
    NUM     shift, and go to state 91
    STRING  shift, and go to state 92
    FNUM    shift, and go to state 93
    INCR    shift, and go to state 95
    DECR    shift, and go to state 96
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '('     shift, and go to state 99
    '&'     shift, and go to state 100
    '!'     shift, and go to state 101

    cast_exp   go to state 184
    unary_exp  go to state 107
    unary_op   go to state 108
    exp        go to state 109
    base       go to state 110


State 164

   59 expression: expression AND $@12 . rel_exp

    ID      shift, and go to state 90
    NUM     shift, and go to state 91
    STRING  shift, and go to state 92
    FNUM    shift, and go to state 93
    INCR    shift, and go to state 95
    DECR    shift, and go to state 96
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '('     shift, and go to state 99
    '&'     shift, and go to state 100
    '!'     shift, and go to state 101

    rel_exp         go to state 185
    add_expression  go to state 104
    mul_expression  go to state 105
    cast_exp        go to state 106
    unary_exp       go to state 107
    unary_op        go to state 108
    exp             go to state 109
    base            go to state 110


State 165

   61 expression: expression OR $@13 . rel_exp

    ID      shift, and go to state 90
    NUM     shift, and go to state 91
    STRING  shift, and go to state 92
    FNUM    shift, and go to state 93
    INCR    shift, and go to state 95
    DECR    shift, and go to state 96
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '('     shift, and go to state 99
    '&'     shift, and go to state 100
    '!'     shift, and go to state 101

    rel_exp         go to state 186
    add_expression  go to state 104
    mul_expression  go to state 105
    cast_exp        go to state 106
    unary_exp       go to state 107
    unary_op        go to state 108
    exp             go to state 109
    base            go to state 110


State 166

   64 rel_exp: rel_exp relop add_expression .
   67 add_expression: add_expression . '+' $@14 mul_expression
   69               | add_expression . '-' $@15 mul_expression

    '+'  shift, and go to state 140
    '-'  shift, and go to state 141

    $default  reduce using rule 64 (rel_exp)


State 167

   67 add_expression: add_expression '+' $@14 . mul_expression

    ID      shift, and go to state 90
    NUM     shift, and go to state 91
    STRING  shift, and go to state 92
    FNUM    shift, and go to state 93
    INCR    shift, and go to state 95
    DECR    shift, and go to state 96
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '('     shift, and go to state 99
    '&'     shift, and go to state 100
    '!'     shift, and go to state 101

    mul_expression  go to state 187
    cast_exp        go to state 106
    unary_exp       go to state 107
    unary_op        go to state 108
    exp             go to state 109
    base            go to state 110


State 168

   69 add_expression: add_expression '-' $@15 . mul_expression

    ID      shift, and go to state 90
    NUM     shift, and go to state 91
    STRING  shift, and go to state 92
    FNUM    shift, and go to state 93
    INCR    shift, and go to state 95
    DECR    shift, and go to state 96
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '('     shift, and go to state 99
    '&'     shift, and go to state 100
    '!'     shift, and go to state 101

    mul_expression  go to state 188
    cast_exp        go to state 106
    unary_exp       go to state 107
    unary_op        go to state 108
    exp             go to state 109
    base            go to state 110


State 169

   72 mul_expression: mul_expression '*' $@16 . cast_exp

    ID      shift, and go to state 90
    NUM     shift, and go to state 91
    STRING  shift, and go to state 92
    FNUM    shift, and go to state 93
    INCR    shift, and go to state 95
    DECR    shift, and go to state 96
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '('     shift, and go to state 99
    '&'     shift, and go to state 100
    '!'     shift, and go to state 101

    cast_exp   go to state 189
    unary_exp  go to state 107
    unary_op   go to state 108
    exp        go to state 109
    base       go to state 110


State 170

   74 mul_expression: mul_expression '/' $@17 . cast_exp

    ID      shift, and go to state 90
    NUM     shift, and go to state 91
    STRING  shift, and go to state 92
    FNUM    shift, and go to state 93
    INCR    shift, and go to state 95
    DECR    shift, and go to state 96
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '('     shift, and go to state 99
    '&'     shift, and go to state 100
    '!'     shift, and go to state 101

    cast_exp   go to state 190
    unary_exp  go to state 107
    unary_op   go to state 108
    exp        go to state 109
    base       go to state 110


State 171

   84 unary_exp: exp INCR $@20 .

    $default  reduce using rule 84 (unary_exp)


State 172

   86 unary_exp: exp DECR $@21 .

    $default  reduce using rule 86 (unary_exp)


State 173

   93 exp: exp '(' ')' .

    $default  reduce using rule 93 (exp)


State 174

   94 exp: exp '(' identifier_list . ')'

    ')'  shift, and go to state 191


State 175

   56 if_else: if_else ELSE IF '(' . expression ')' $@11 compound_statement

    ID      shift, and go to state 90
    NUM     shift, and go to state 91
    STRING  shift, and go to state 92
    FNUM    shift, and go to state 93
    NOT     shift, and go to state 94
    INCR    shift, and go to state 95
    DECR    shift, and go to state 96
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '('     shift, and go to state 99
    '&'     shift, and go to state 100
    '!'     shift, and go to state 101

    expression      go to state 192
    rel_exp         go to state 103
    add_expression  go to state 104
    mul_expression  go to state 105
    cast_exp        go to state 106
    unary_exp       go to state 107
    unary_op        go to state 108
    exp             go to state 109
    base            go to state 110


State 176

  106 array: type ID '[' NUM . ']' ';'
  107      | type ID '[' NUM . ']' '=' STRING ';'
  109      | type ID '[' NUM . ']' '=' NUM ';'

    ']'  shift, and go to state 193


State 177

  111 array: type ID '[' ']' . '=' STRING ';'

    '='  shift, and go to state 194


State 178

   48 assignment: type ID $@4 '=' . $@5 expression $@6 ';'

    $default  reduce using rule 46 ($@5)

    $@5  go to state 195


State 179

   52 for: FOR '(' assignment $@7 expression . $@8 ';' expression $@9 ')' compound_statement
   59 expression: expression . AND $@12 rel_exp
   61           | expression . OR $@13 rel_exp

    AND  shift, and go to state 130
    OR   shift, and go to state 131

    $default  reduce using rule 50 ($@8)

    $@8  go to state 196


State 180

   54 if_else: IF '(' expression ')' $@10 . compound_statement

    '{'  shift, and go to state 50

    compound_statement  go to state 197


State 181

  112 function_call: ID '(' identifier_list ')' ';' . ID '(' ')' ';'

    ID  shift, and go to state 198


State 182

  108 array: ID '[' NUM ']' '=' . STRING ';'
  110      | ID '[' NUM ']' '=' . NUM ';'

    NUM     shift, and go to state 199
    STRING  shift, and go to state 200


State 183

   44 assignment: ID $@1 '=' $@2 expression . $@3 ';'
   59 expression: expression . AND $@12 rel_exp
   61           | expression . OR $@13 rel_exp

    AND  shift, and go to state 130
    OR   shift, and go to state 131

    $default  reduce using rule 43 ($@3)

    $@3  go to state 201


State 184

   77 cast_exp: '(' type ')' cast_exp .

    $default  reduce using rule 77 (cast_exp)


State 185

   59 expression: expression AND $@12 rel_exp .
   64 rel_exp: rel_exp . relop add_expression

    GE  shift, and go to state 133
    EE  shift, and go to state 134
    LE  shift, and go to state 135
    NE  shift, and go to state 136
    LT  shift, and go to state 137
    GT  shift, and go to state 138

    $default  reduce using rule 59 (expression)

    relop  go to state 139


State 186

   61 expression: expression OR $@13 rel_exp .
   64 rel_exp: rel_exp . relop add_expression

    GE  shift, and go to state 133
    EE  shift, and go to state 134
    LE  shift, and go to state 135
    NE  shift, and go to state 136
    LT  shift, and go to state 137
    GT  shift, and go to state 138

    $default  reduce using rule 61 (expression)

    relop  go to state 139


State 187

   67 add_expression: add_expression '+' $@14 mul_expression .
   72 mul_expression: mul_expression . '*' $@16 cast_exp
   74               | mul_expression . '/' $@17 cast_exp

    '*'  shift, and go to state 142
    '/'  shift, and go to state 143

    $default  reduce using rule 67 (add_expression)


State 188

   69 add_expression: add_expression '-' $@15 mul_expression .
   72 mul_expression: mul_expression . '*' $@16 cast_exp
   74               | mul_expression . '/' $@17 cast_exp

    '*'  shift, and go to state 142
    '/'  shift, and go to state 143

    $default  reduce using rule 69 (add_expression)


State 189

   72 mul_expression: mul_expression '*' $@16 cast_exp .

    $default  reduce using rule 72 (mul_expression)


State 190

   74 mul_expression: mul_expression '/' $@17 cast_exp .

    $default  reduce using rule 74 (mul_expression)


State 191

   94 exp: exp '(' identifier_list ')' .

    $default  reduce using rule 94 (exp)


State 192

   56 if_else: if_else ELSE IF '(' expression . ')' $@11 compound_statement
   59 expression: expression . AND $@12 rel_exp
   61           | expression . OR $@13 rel_exp

    AND  shift, and go to state 130
    OR   shift, and go to state 131
    ')'  shift, and go to state 202


State 193

  106 array: type ID '[' NUM ']' . ';'
  107      | type ID '[' NUM ']' . '=' STRING ';'
  109      | type ID '[' NUM ']' . '=' NUM ';'

    '='  shift, and go to state 203
    ';'  shift, and go to state 204


State 194

  111 array: type ID '[' ']' '=' . STRING ';'

    STRING  shift, and go to state 205


State 195

   48 assignment: type ID $@4 '=' $@5 . expression $@6 ';'

    ID      shift, and go to state 90
    NUM     shift, and go to state 91
    STRING  shift, and go to state 92
    FNUM    shift, and go to state 93
    NOT     shift, and go to state 94
    INCR    shift, and go to state 95
    DECR    shift, and go to state 96
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '('     shift, and go to state 99
    '&'     shift, and go to state 100
    '!'     shift, and go to state 101

    expression      go to state 206
    rel_exp         go to state 103
    add_expression  go to state 104
    mul_expression  go to state 105
    cast_exp        go to state 106
    unary_exp       go to state 107
    unary_op        go to state 108
    exp             go to state 109
    base            go to state 110


State 196

   52 for: FOR '(' assignment $@7 expression $@8 . ';' expression $@9 ')' compound_statement

    ';'  shift, and go to state 207


State 197

   54 if_else: IF '(' expression ')' $@10 compound_statement .

    $default  reduce using rule 54 (if_else)


State 198

  112 function_call: ID '(' identifier_list ')' ';' ID . '(' ')' ';'

    '('  shift, and go to state 208


State 199

  110 array: ID '[' NUM ']' '=' NUM . ';'

    ';'  shift, and go to state 209


State 200

  108 array: ID '[' NUM ']' '=' STRING . ';'

    ';'  shift, and go to state 210


State 201

   44 assignment: ID $@1 '=' $@2 expression $@3 . ';'

    ';'  shift, and go to state 211


State 202

   56 if_else: if_else ELSE IF '(' expression ')' . $@11 compound_statement

    $default  reduce using rule 55 ($@11)

    $@11  go to state 212


State 203

  107 array: type ID '[' NUM ']' '=' . STRING ';'
  109      | type ID '[' NUM ']' '=' . NUM ';'

    NUM     shift, and go to state 213
    STRING  shift, and go to state 214


State 204

  106 array: type ID '[' NUM ']' ';' .

    $default  reduce using rule 106 (array)


State 205

  111 array: type ID '[' ']' '=' STRING . ';'

    ';'  shift, and go to state 215


State 206

   48 assignment: type ID $@4 '=' $@5 expression . $@6 ';'
   59 expression: expression . AND $@12 rel_exp
   61           | expression . OR $@13 rel_exp

    AND  shift, and go to state 130
    OR   shift, and go to state 131

    $default  reduce using rule 47 ($@6)

    $@6  go to state 216


State 207

   52 for: FOR '(' assignment $@7 expression $@8 ';' . expression $@9 ')' compound_statement

    ID      shift, and go to state 90
    NUM     shift, and go to state 91
    STRING  shift, and go to state 92
    FNUM    shift, and go to state 93
    NOT     shift, and go to state 94
    INCR    shift, and go to state 95
    DECR    shift, and go to state 96
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '('     shift, and go to state 99
    '&'     shift, and go to state 100
    '!'     shift, and go to state 101

    expression      go to state 217
    rel_exp         go to state 103
    add_expression  go to state 104
    mul_expression  go to state 105
    cast_exp        go to state 106
    unary_exp       go to state 107
    unary_op        go to state 108
    exp             go to state 109
    base            go to state 110


State 208

  112 function_call: ID '(' identifier_list ')' ';' ID '(' . ')' ';'

    ')'  shift, and go to state 218


State 209

  110 array: ID '[' NUM ']' '=' NUM ';' .

    $default  reduce using rule 110 (array)


State 210

  108 array: ID '[' NUM ']' '=' STRING ';' .

    $default  reduce using rule 108 (array)


State 211

   44 assignment: ID $@1 '=' $@2 expression $@3 ';' .

    $default  reduce using rule 44 (assignment)


State 212

   56 if_else: if_else ELSE IF '(' expression ')' $@11 . compound_statement

    '{'  shift, and go to state 50

    compound_statement  go to state 219


State 213

  109 array: type ID '[' NUM ']' '=' NUM . ';'

    ';'  shift, and go to state 220


State 214

  107 array: type ID '[' NUM ']' '=' STRING . ';'

    ';'  shift, and go to state 221


State 215

  111 array: type ID '[' ']' '=' STRING ';' .

    $default  reduce using rule 111 (array)


State 216

   48 assignment: type ID $@4 '=' $@5 expression $@6 . ';'

    ';'  shift, and go to state 222


State 217

   52 for: FOR '(' assignment $@7 expression $@8 ';' expression . $@9 ')' compound_statement
   59 expression: expression . AND $@12 rel_exp
   61           | expression . OR $@13 rel_exp

    AND  shift, and go to state 130
    OR   shift, and go to state 131

    $default  reduce using rule 51 ($@9)

    $@9  go to state 223


State 218

  112 function_call: ID '(' identifier_list ')' ';' ID '(' ')' . ';'

    ';'  shift, and go to state 224


State 219

   56 if_else: if_else ELSE IF '(' expression ')' $@11 compound_statement .

    $default  reduce using rule 56 (if_else)


State 220

  109 array: type ID '[' NUM ']' '=' NUM ';' .

    $default  reduce using rule 109 (array)


State 221

  107 array: type ID '[' NUM ']' '=' STRING ';' .

    $default  reduce using rule 107 (array)


State 222

   48 assignment: type ID $@4 '=' $@5 expression $@6 ';' .

    $default  reduce using rule 48 (assignment)


State 223

   52 for: FOR '(' assignment $@7 expression $@8 ';' expression $@9 . ')' compound_statement

    ')'  shift, and go to state 225


State 224

  112 function_call: ID '(' identifier_list ')' ';' ID '(' ')' ';' .

    $default  reduce using rule 112 (function_call)


State 225

   52 for: FOR '(' assignment $@7 expression $@8 ';' expression $@9 ')' . compound_statement

    '{'  shift, and go to state 50

    compound_statement  go to state 226


State 226

   52 for: FOR '(' assignment $@7 expression $@8 ';' expression $@9 ')' compound_statement .

    $default  reduce using rule 52 (for)
